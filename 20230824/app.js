// ! 스코프 체인
// ! 중첩함수로 인해 스코프가 계층적 구조를 이루어지는것을 말한다.

// ! 렉시컬 스코프 => 정적 스코프 || 동적 스코프
// ! 자바스크립트는 렉시컬 스코프다.

// ! 함루르 어디서 호출했는지에 따라 달라진다. => 동적 스코프
// ! 함수를 어디서 선언했는지에 따라 달라진다. => 렉시컬 스코프

// * 스코프 => 식별자를 검색하는 규칙이다.
// * 스코프는 계층적 구조를 이룬다.
// * 자바스크립트는 렉시컬 스코프다. 즉 어디서 선언되었는지에 따라 달라진다.

var x = 1;

// ! 함수에 상위 스코프는 자신이 정의된 스코프다.

function foo() {
  var x = 10;
  bar();

  function bar() {
    console.log(x);
  }
}

foo();
bar();

// ? ESM
// * ECMA SCRIPT MODULE

// ! var, let, const 변수다.

// & var
// & var는 재선언이 가능하다.
// & var는 함수 레벨 스코프다.
// & var는 재할당이 가능하다.
// & var는 호이스팅이 일어난다.

// ? let
// ? let 재선언이 안된다.
// ? let 재할당이 가능하다.
// ? 호이스팅이 안되는 것 처럼 보이지만 실제로 호이스팅이 된다.
// ? let 블록 레벨 스코프다.

// * const
// * const는 재할당이 금지된 변수다. 선언과 동시에 초기화 해아한다.
// * 호이스팅이 안되는 것 처럼 보이지만 실제로 호이스팅이 된다.
// * 블록 레벨 스코프다.
// * 재선언이 안된다.

// 블록문; // 값으로 평가할 수 없는 문 (블록문)

let x = 1;

if (true) {
  // 시작지점
  console.log(x);
  // 변수선언 이전
  let x = 20;
}

// ^ let, const 호이스팅 특징
// ^ 스코프의 시작 지점부터 변수 선언 이전까지 참조할 수 없다. Temporal Dead Zone => TDZ 일시적 사각지대
